/*function doInput(e){
    let text = e.target.value;
	if (text.length == 0) return;
	let rs = RiString(text);

    let words = rs.words();
    let s = "";
    
    for (let i = 0; i < words.length; i++)
    {
        let w = words[i];
        if (rs.posAt(i) == "nnp")
        {
            let similarWords = RiTa.similarBySound(w);
            if (similarWords.length > 0)
            {
                w = similarWords[Math.floor(Math.random() * similarWords.length)];
            }
        }
        
        s += w + " ";
    }
    
    output.innerHTML = s;
    


// POS Code
/*    

    let pos = rs.pos();
    let s = "<ul>";
    for(let item of pos){
      let desc = POS[item];
      if(desc == undefined) desc = "??"
      s += `<li><b>${item}</b> : ${desc}</li>`;
    }
    s += "</ul>";
    output.innerHTML = s;
    
*/

}
*/

/*

class Dorb {
    constructor(name, description, dorbtype, nstats, personalitytype, dorbImageURL) {
        this.name = name;
        this.description = description;
        this.dorbImage = dorbImageURL;
        this.type = dorbtype;
        this.personality = personalitytype;
        this.stats = nstats;
        this.moves = [];
    }

    addMove(newMove) {
        this.moves.push(newMove);
    }

    removeMove(moveReference)
{
    for(let i = moveReference; i < moves.length - 1; i++)
        {
            this.moves[i] = this.moves[i+1];
        }
    this.moves[moves.length - 1] = null;
}

    getStat(statReference)
{
    return stats[statReference];
}



}

class Move {
    constructor(name, description, movetype, power) {
        this.name = name;
        this.description = description;
        this.type = movetype;
        this.power = power;
    }
}

*/

/*

    let pos = rs.pos();
    let s = "<ul>";
    for(let item of pos){
      let desc = POS[item];
      if(desc == undefined) desc = "??"
      s += `<li><b>${item}</b> : ${desc}</li>`;
    }
    s += "</ul>";
    output.innerHTML = s;
    
    let text = e.target.value;
	if (text.length == 0) return;
	let rs = RiString(text);

    let words = rs.words();
    let s = "";
    
    for (let i = 0; i < words.length; i++)
    {
        let w = words[i];
        if (rs.posAt(i) == "nnp")
        {
            let similarWords = RiTa.similarBySound(w);
            if (similarWords.length > 0)
            {
                w = similarWords[Math.floor(Math.random() * similarWords.length)];
            }
        }
        
        s += w + " ";
    }
    
    output.innerHTML = s;

*/